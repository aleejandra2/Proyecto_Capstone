# Generated by Django 5.2.6 on 2025-09-16 00:49

import LevelUp.validators
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('rut', models.CharField(max_length=12, unique=True, validators=[LevelUp.validators.validar_rut_chileno])),
                ('email', models.EmailField(max_length=128, unique=True)),
                ('rol', models.CharField(choices=[('Estudiante', 'Estudiante'), ('Docente', 'Docente'), ('Administrador', 'Administrador')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Ranking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descripcion', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Recompensa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('estrella', 'Estrella'), ('medalla', 'Medalla'), ('puntos', 'Puntos'), ('nivel', 'Nivel')], max_length=50)),
                ('descripcion', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Recurso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(max_length=50)),
                ('url', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Administrador',
            fields=[
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Docente',
            fields=[
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('asignatura', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Estudiante',
            fields=[
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('nivel', models.IntegerField(default=1)),
                ('curso', models.CharField(max_length=50)),
                ('puntos', models.IntegerField(default=0)),
                ('medallas', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Actividad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=150)),
                ('descripcion', models.TextField()),
                ('tipo', models.CharField(choices=[('quiz', 'Quiz'), ('juego', 'Juego'), ('video', 'Video'), ('tarea', 'Tarea')], max_length=20)),
                ('dificultad', models.IntegerField(choices=[(1, 'Fácil'), (2, 'Medio'), (3, 'Difícil')], default=2, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('recompensa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='LevelUp.recompensa')),
                ('recurso', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='LevelUp.recurso')),
            ],
        ),
        migrations.CreateModel(
            name='ReporteProgreso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avance', models.FloatField()),
                ('fecha', models.DateField()),
                ('rendimiento', models.CharField(max_length=50)),
                ('ranking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reportes', to='LevelUp.ranking')),
                ('estudiante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reportes', to='LevelUp.estudiante')),
            ],
        ),
        migrations.CreateModel(
            name='AsignacionActividad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente'), ('en_progreso', 'En progreso'), ('completada', 'Completada')], default='pendiente', max_length=20)),
                ('nota', models.FloatField(blank=True, null=True)),
                ('fecha_asignacion', models.DateField(auto_now_add=True)),
                ('fecha_completada', models.DateField(blank=True, null=True)),
                ('actividad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='LevelUp.actividad')),
                ('estudiante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='LevelUp.estudiante')),
            ],
            options={
                'unique_together': {('estudiante', 'actividad')},
            },
        ),
        migrations.AddField(
            model_name='actividad',
            name='estudiantes',
            field=models.ManyToManyField(blank=True, related_name='actividades', through='LevelUp.AsignacionActividad', to='LevelUp.estudiante'),
        ),
    ]
